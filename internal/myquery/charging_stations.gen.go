// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package myquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/internal/mymodel"
)

func newChargingStation(db *gorm.DB, opts ...gen.DOOption) chargingStation {
	_chargingStation := chargingStation{}

	_chargingStation.chargingStationDo.UseDB(db, opts...)
	_chargingStation.chargingStationDo.UseModel(&mymodel.ChargingStation{})

	tableName := _chargingStation.chargingStationDo.TableName()
	_chargingStation.ALL = field.NewAsterisk(tableName)
	_chargingStation.ID = field.NewUint(tableName, "id")
	_chargingStation.CreatedAt = field.NewTime(tableName, "created_at")
	_chargingStation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chargingStation.DeletedAt = field.NewField(tableName, "deleted_at")
	_chargingStation.CityID = field.NewUint(tableName, "city_id")
	_chargingStation.ChargePoints = chargingStationHasManyChargePoints{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ChargePoints", "mymodel.ChargePoint"),
		ChargingStation: struct {
			field.RelationField
			City struct {
				field.RelationField
				Province struct {
					field.RelationField
				}
			}
			ChargePoints struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("ChargePoints.ChargingStation", "mymodel.ChargingStation"),
			City: struct {
				field.RelationField
				Province struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("ChargePoints.ChargingStation.City", "mymodel.City"),
				Province: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ChargePoints.ChargingStation.City.Province", "mymodel.Province"),
				},
			},
			ChargePoints: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ChargePoints.ChargingStation.ChargePoints", "mymodel.ChargePoint"),
			},
		},
		PowerSockets: struct {
			field.RelationField
			ChargePoint struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("ChargePoints.PowerSockets", "mymodel.PowerSocket"),
			ChargePoint: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ChargePoints.PowerSockets.ChargePoint", "mymodel.ChargePoint"),
			},
		},
	}

	_chargingStation.City = chargingStationBelongsToCity{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("City", "mymodel.City"),
	}

	_chargingStation.fillFieldMap()

	return _chargingStation
}

type chargingStation struct {
	chargingStationDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	CityID       field.Uint
	ChargePoints chargingStationHasManyChargePoints

	City chargingStationBelongsToCity

	fieldMap map[string]field.Expr
}

func (c chargingStation) Table(newTableName string) *chargingStation {
	c.chargingStationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chargingStation) As(alias string) *chargingStation {
	c.chargingStationDo.DO = *(c.chargingStationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chargingStation) updateTableName(table string) *chargingStation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CityID = field.NewUint(table, "city_id")

	c.fillFieldMap()

	return c
}

func (c *chargingStation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chargingStation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["city_id"] = c.CityID

}

func (c chargingStation) clone(db *gorm.DB) chargingStation {
	c.chargingStationDo.ReplaceConnPool(db.Statement.ConnPool)
	c.ChargePoints.db = db.Session(&gorm.Session{Initialized: true})
	c.ChargePoints.db.Statement.ConnPool = db.Statement.ConnPool
	c.City.db = db.Session(&gorm.Session{Initialized: true})
	c.City.db.Statement.ConnPool = db.Statement.ConnPool
	return c
}

func (c chargingStation) replaceDB(db *gorm.DB) chargingStation {
	c.chargingStationDo.ReplaceDB(db)
	c.ChargePoints.db = db.Session(&gorm.Session{})
	c.City.db = db.Session(&gorm.Session{})
	return c
}

type chargingStationHasManyChargePoints struct {
	db *gorm.DB

	field.RelationField

	ChargingStation struct {
		field.RelationField
		City struct {
			field.RelationField
			Province struct {
				field.RelationField
			}
		}
		ChargePoints struct {
			field.RelationField
		}
	}
	PowerSockets struct {
		field.RelationField
		ChargePoint struct {
			field.RelationField
		}
	}
}

func (a chargingStationHasManyChargePoints) Where(conds ...field.Expr) *chargingStationHasManyChargePoints {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chargingStationHasManyChargePoints) WithContext(ctx context.Context) *chargingStationHasManyChargePoints {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chargingStationHasManyChargePoints) Session(session *gorm.Session) *chargingStationHasManyChargePoints {
	a.db = a.db.Session(session)
	return &a
}

func (a chargingStationHasManyChargePoints) Model(m *mymodel.ChargingStation) *chargingStationHasManyChargePointsTx {
	return &chargingStationHasManyChargePointsTx{a.db.Model(m).Association(a.Name())}
}

func (a chargingStationHasManyChargePoints) Unscoped() *chargingStationHasManyChargePoints {
	a.db = a.db.Unscoped()
	return &a
}

type chargingStationHasManyChargePointsTx struct{ tx *gorm.Association }

func (a chargingStationHasManyChargePointsTx) Find() (result []*mymodel.ChargePoint, err error) {
	return result, a.tx.Find(&result)
}

func (a chargingStationHasManyChargePointsTx) Append(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chargingStationHasManyChargePointsTx) Replace(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chargingStationHasManyChargePointsTx) Delete(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chargingStationHasManyChargePointsTx) Clear() error {
	return a.tx.Clear()
}

func (a chargingStationHasManyChargePointsTx) Count() int64 {
	return a.tx.Count()
}

func (a chargingStationHasManyChargePointsTx) Unscoped() *chargingStationHasManyChargePointsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type chargingStationBelongsToCity struct {
	db *gorm.DB

	field.RelationField
}

func (a chargingStationBelongsToCity) Where(conds ...field.Expr) *chargingStationBelongsToCity {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chargingStationBelongsToCity) WithContext(ctx context.Context) *chargingStationBelongsToCity {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chargingStationBelongsToCity) Session(session *gorm.Session) *chargingStationBelongsToCity {
	a.db = a.db.Session(session)
	return &a
}

func (a chargingStationBelongsToCity) Model(m *mymodel.ChargingStation) *chargingStationBelongsToCityTx {
	return &chargingStationBelongsToCityTx{a.db.Model(m).Association(a.Name())}
}

func (a chargingStationBelongsToCity) Unscoped() *chargingStationBelongsToCity {
	a.db = a.db.Unscoped()
	return &a
}

type chargingStationBelongsToCityTx struct{ tx *gorm.Association }

func (a chargingStationBelongsToCityTx) Find() (result *mymodel.City, err error) {
	return result, a.tx.Find(&result)
}

func (a chargingStationBelongsToCityTx) Append(values ...*mymodel.City) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chargingStationBelongsToCityTx) Replace(values ...*mymodel.City) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chargingStationBelongsToCityTx) Delete(values ...*mymodel.City) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chargingStationBelongsToCityTx) Clear() error {
	return a.tx.Clear()
}

func (a chargingStationBelongsToCityTx) Count() int64 {
	return a.tx.Count()
}

func (a chargingStationBelongsToCityTx) Unscoped() *chargingStationBelongsToCityTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type chargingStationDo struct{ gen.DO }

type IChargingStationDo interface {
	gen.SubQuery
	Debug() IChargingStationDo
	WithContext(ctx context.Context) IChargingStationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChargingStationDo
	WriteDB() IChargingStationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChargingStationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChargingStationDo
	Not(conds ...gen.Condition) IChargingStationDo
	Or(conds ...gen.Condition) IChargingStationDo
	Select(conds ...field.Expr) IChargingStationDo
	Where(conds ...gen.Condition) IChargingStationDo
	Order(conds ...field.Expr) IChargingStationDo
	Distinct(cols ...field.Expr) IChargingStationDo
	Omit(cols ...field.Expr) IChargingStationDo
	Join(table schema.Tabler, on ...field.Expr) IChargingStationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChargingStationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChargingStationDo
	Group(cols ...field.Expr) IChargingStationDo
	Having(conds ...gen.Condition) IChargingStationDo
	Limit(limit int) IChargingStationDo
	Offset(offset int) IChargingStationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChargingStationDo
	Unscoped() IChargingStationDo
	Create(values ...*mymodel.ChargingStation) error
	CreateInBatches(values []*mymodel.ChargingStation, batchSize int) error
	Save(values ...*mymodel.ChargingStation) error
	First() (*mymodel.ChargingStation, error)
	Take() (*mymodel.ChargingStation, error)
	Last() (*mymodel.ChargingStation, error)
	Find() ([]*mymodel.ChargingStation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mymodel.ChargingStation, err error)
	FindInBatches(result *[]*mymodel.ChargingStation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mymodel.ChargingStation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChargingStationDo
	Assign(attrs ...field.AssignExpr) IChargingStationDo
	Joins(fields ...field.RelationField) IChargingStationDo
	Preload(fields ...field.RelationField) IChargingStationDo
	FirstOrInit() (*mymodel.ChargingStation, error)
	FirstOrCreate() (*mymodel.ChargingStation, error)
	FindByPage(offset int, limit int) (result []*mymodel.ChargingStation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChargingStationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chargingStationDo) Debug() IChargingStationDo {
	return c.withDO(c.DO.Debug())
}

func (c chargingStationDo) WithContext(ctx context.Context) IChargingStationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chargingStationDo) ReadDB() IChargingStationDo {
	return c.Clauses(dbresolver.Read)
}

func (c chargingStationDo) WriteDB() IChargingStationDo {
	return c.Clauses(dbresolver.Write)
}

func (c chargingStationDo) Session(config *gorm.Session) IChargingStationDo {
	return c.withDO(c.DO.Session(config))
}

func (c chargingStationDo) Clauses(conds ...clause.Expression) IChargingStationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chargingStationDo) Returning(value interface{}, columns ...string) IChargingStationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chargingStationDo) Not(conds ...gen.Condition) IChargingStationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chargingStationDo) Or(conds ...gen.Condition) IChargingStationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chargingStationDo) Select(conds ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chargingStationDo) Where(conds ...gen.Condition) IChargingStationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chargingStationDo) Order(conds ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chargingStationDo) Distinct(cols ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chargingStationDo) Omit(cols ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chargingStationDo) Join(table schema.Tabler, on ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chargingStationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chargingStationDo) RightJoin(table schema.Tabler, on ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chargingStationDo) Group(cols ...field.Expr) IChargingStationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chargingStationDo) Having(conds ...gen.Condition) IChargingStationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chargingStationDo) Limit(limit int) IChargingStationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chargingStationDo) Offset(offset int) IChargingStationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chargingStationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChargingStationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chargingStationDo) Unscoped() IChargingStationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chargingStationDo) Create(values ...*mymodel.ChargingStation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chargingStationDo) CreateInBatches(values []*mymodel.ChargingStation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chargingStationDo) Save(values ...*mymodel.ChargingStation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chargingStationDo) First() (*mymodel.ChargingStation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.ChargingStation), nil
	}
}

func (c chargingStationDo) Take() (*mymodel.ChargingStation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.ChargingStation), nil
	}
}

func (c chargingStationDo) Last() (*mymodel.ChargingStation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.ChargingStation), nil
	}
}

func (c chargingStationDo) Find() ([]*mymodel.ChargingStation, error) {
	result, err := c.DO.Find()
	return result.([]*mymodel.ChargingStation), err
}

func (c chargingStationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mymodel.ChargingStation, err error) {
	buf := make([]*mymodel.ChargingStation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chargingStationDo) FindInBatches(result *[]*mymodel.ChargingStation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chargingStationDo) Attrs(attrs ...field.AssignExpr) IChargingStationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chargingStationDo) Assign(attrs ...field.AssignExpr) IChargingStationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chargingStationDo) Joins(fields ...field.RelationField) IChargingStationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chargingStationDo) Preload(fields ...field.RelationField) IChargingStationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chargingStationDo) FirstOrInit() (*mymodel.ChargingStation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.ChargingStation), nil
	}
}

func (c chargingStationDo) FirstOrCreate() (*mymodel.ChargingStation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.ChargingStation), nil
	}
}

func (c chargingStationDo) FindByPage(offset int, limit int) (result []*mymodel.ChargingStation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chargingStationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chargingStationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chargingStationDo) Delete(models ...*mymodel.ChargingStation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chargingStationDo) withDO(do gen.Dao) *chargingStationDo {
	c.DO = *do.(*gen.DO)
	return c
}
