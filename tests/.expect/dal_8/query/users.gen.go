// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/tests_test"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&tests_test.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.Id = field.NewString(tableName, "id")
	_user.Posts = userHasManyPosts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Posts", "tests_test.Post"),
		Author: struct {
			field.RelationField
			Posts struct {
				field.RelationField
			}
			Comments struct {
				field.RelationField
				Post struct {
					field.RelationField
				}
				Author struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Posts.Author", "tests_test.User"),
			Posts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Posts.Author.Posts", "tests_test.Post"),
			},
			Comments: struct {
				field.RelationField
				Post struct {
					field.RelationField
				}
				Author struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Posts.Author.Comments", "tests_test.Comment"),
				Post: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Posts.Author.Comments.Post", "tests_test.Post"),
				},
				Author: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Posts.Author.Comments.Author", "tests_test.User"),
				},
			},
		},
		Comments: struct {
			field.RelationField
			Post struct {
				field.RelationField
			}
			Author struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Posts.Comments", "tests_test.Comment"),
			Post: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Posts.Comments.Post", "tests_test.Post"),
			},
			Author: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Posts.Comments.Author", "tests_test.User"),
			},
		},
	}

	_user.Comments = userHasManyComments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Comments", "tests_test.Comment"),
		Post: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Comments.Post", "tests_test.Post"),
		},
		Author: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Comments.Author", "tests_test.User"),
		},
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL   field.Asterisk
	Id    field.String
	Posts userHasManyPosts

	Comments userHasManyComments

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.Id = field.NewString(table, "id")

	u.fillFieldMap()

	return u
}

func (u *user) WithContext(ctx context.Context) IUserDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u user) Alias() string { return u.userDo.Alias() }

func (u user) Columns(cols ...field.Expr) gen.Columns { return u.userDo.Columns(cols...) }

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.Id

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	u.Posts.db = db.Session(&gorm.Session{Initialized: true})
	u.Posts.db.Statement.ConnPool = db.Statement.ConnPool
	u.Comments.db = db.Session(&gorm.Session{Initialized: true})
	u.Comments.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	u.Posts.db = db.Session(&gorm.Session{})
	u.Comments.db = db.Session(&gorm.Session{})
	return u
}

type userHasManyPosts struct {
	db *gorm.DB

	field.RelationField

	Author struct {
		field.RelationField
		Posts struct {
			field.RelationField
		}
		Comments struct {
			field.RelationField
			Post struct {
				field.RelationField
			}
			Author struct {
				field.RelationField
			}
		}
	}
	Comments struct {
		field.RelationField
		Post struct {
			field.RelationField
		}
		Author struct {
			field.RelationField
		}
	}
}

func (a userHasManyPosts) Where(conds ...field.Expr) *userHasManyPosts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyPosts) WithContext(ctx context.Context) *userHasManyPosts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyPosts) Session(session *gorm.Session) *userHasManyPosts {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyPosts) Model(m *tests_test.User) *userHasManyPostsTx {
	return &userHasManyPostsTx{a.db.Model(m).Association(a.Name())}
}

func (a userHasManyPosts) Unscoped() *userHasManyPosts {
	a.db = a.db.Unscoped()
	return &a
}

type userHasManyPostsTx struct{ tx *gorm.Association }

func (a userHasManyPostsTx) Find() (result []*tests_test.Post, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyPostsTx) Append(values ...*tests_test.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyPostsTx) Replace(values ...*tests_test.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyPostsTx) Delete(values ...*tests_test.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyPostsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyPostsTx) Count() int64 {
	return a.tx.Count()
}

func (a userHasManyPostsTx) Unscoped() *userHasManyPostsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userHasManyComments struct {
	db *gorm.DB

	field.RelationField

	Post struct {
		field.RelationField
	}
	Author struct {
		field.RelationField
	}
}

func (a userHasManyComments) Where(conds ...field.Expr) *userHasManyComments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyComments) WithContext(ctx context.Context) *userHasManyComments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyComments) Session(session *gorm.Session) *userHasManyComments {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyComments) Model(m *tests_test.User) *userHasManyCommentsTx {
	return &userHasManyCommentsTx{a.db.Model(m).Association(a.Name())}
}

func (a userHasManyComments) Unscoped() *userHasManyComments {
	a.db = a.db.Unscoped()
	return &a
}

type userHasManyCommentsTx struct{ tx *gorm.Association }

func (a userHasManyCommentsTx) Find() (result []*tests_test.Comment, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyCommentsTx) Append(values ...*tests_test.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyCommentsTx) Replace(values ...*tests_test.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyCommentsTx) Delete(values ...*tests_test.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyCommentsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyCommentsTx) Count() int64 {
	return a.tx.Count()
}

func (a userHasManyCommentsTx) Unscoped() *userHasManyCommentsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*tests_test.User) error
	CreateInBatches(values []*tests_test.User, batchSize int) error
	Save(values ...*tests_test.User) error
	First() (*tests_test.User, error)
	Take() (*tests_test.User, error)
	Last() (*tests_test.User, error)
	Find() ([]*tests_test.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tests_test.User, err error)
	FindInBatches(result *[]*tests_test.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*tests_test.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*tests_test.User, error)
	FirstOrCreate() (*tests_test.User, error)
	FindByPage(offset int, limit int) (result []*tests_test.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*tests_test.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*tests_test.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*tests_test.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*tests_test.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*tests_test.User), nil
	}
}

func (u userDo) Take() (*tests_test.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*tests_test.User), nil
	}
}

func (u userDo) Last() (*tests_test.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*tests_test.User), nil
	}
}

func (u userDo) Find() ([]*tests_test.User, error) {
	result, err := u.DO.Find()
	return result.([]*tests_test.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tests_test.User, err error) {
	buf := make([]*tests_test.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*tests_test.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*tests_test.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*tests_test.User), nil
	}
}

func (u userDo) FirstOrCreate() (*tests_test.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*tests_test.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*tests_test.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*tests_test.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
