// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package myquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/internal/mymodel"
)

func newPowerSocket(db *gorm.DB, opts ...gen.DOOption) powerSocket {
	_powerSocket := powerSocket{}

	_powerSocket.powerSocketDo.UseDB(db, opts...)
	_powerSocket.powerSocketDo.UseModel(&mymodel.PowerSocket{})

	tableName := _powerSocket.powerSocketDo.TableName()
	_powerSocket.ALL = field.NewAsterisk(tableName)
	_powerSocket.ID = field.NewUint(tableName, "id")
	_powerSocket.CreatedAt = field.NewTime(tableName, "created_at")
	_powerSocket.UpdatedAt = field.NewTime(tableName, "updated_at")
	_powerSocket.DeletedAt = field.NewField(tableName, "deleted_at")
	_powerSocket.ChargePointID = field.NewUint(tableName, "charge_point_id")
	_powerSocket.ChargePoint = powerSocketBelongsToChargePoint{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ChargePoint", "mymodel.ChargePoint"),
		ChargingStation: struct {
			field.RelationField
			City struct {
				field.RelationField
				Province struct {
					field.RelationField
				}
			}
			ChargePoints struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("ChargePoint.ChargingStation", "mymodel.ChargingStation"),
			City: struct {
				field.RelationField
				Province struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("ChargePoint.ChargingStation.City", "mymodel.City"),
				Province: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ChargePoint.ChargingStation.City.Province", "mymodel.Province"),
				},
			},
			ChargePoints: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ChargePoint.ChargingStation.ChargePoints", "mymodel.ChargePoint"),
			},
		},
	}

	_powerSocket.fillFieldMap()

	return _powerSocket
}

type powerSocket struct {
	powerSocketDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ChargePointID field.Uint
	ChargePoint   powerSocketBelongsToChargePoint

	fieldMap map[string]field.Expr
}

func (p powerSocket) Table(newTableName string) *powerSocket {
	p.powerSocketDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p powerSocket) As(alias string) *powerSocket {
	p.powerSocketDo.DO = *(p.powerSocketDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *powerSocket) updateTableName(table string) *powerSocket {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ChargePointID = field.NewUint(table, "charge_point_id")

	p.fillFieldMap()

	return p
}

func (p *powerSocket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *powerSocket) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["charge_point_id"] = p.ChargePointID

}

func (p powerSocket) clone(db *gorm.DB) powerSocket {
	p.powerSocketDo.ReplaceConnPool(db.Statement.ConnPool)
	p.ChargePoint.db = db.Session(&gorm.Session{Initialized: true})
	p.ChargePoint.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p powerSocket) replaceDB(db *gorm.DB) powerSocket {
	p.powerSocketDo.ReplaceDB(db)
	p.ChargePoint.db = db.Session(&gorm.Session{})
	return p
}

type powerSocketBelongsToChargePoint struct {
	db *gorm.DB

	field.RelationField

	ChargingStation struct {
		field.RelationField
		City struct {
			field.RelationField
			Province struct {
				field.RelationField
			}
		}
		ChargePoints struct {
			field.RelationField
		}
	}
}

func (a powerSocketBelongsToChargePoint) Where(conds ...field.Expr) *powerSocketBelongsToChargePoint {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a powerSocketBelongsToChargePoint) WithContext(ctx context.Context) *powerSocketBelongsToChargePoint {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a powerSocketBelongsToChargePoint) Session(session *gorm.Session) *powerSocketBelongsToChargePoint {
	a.db = a.db.Session(session)
	return &a
}

func (a powerSocketBelongsToChargePoint) Model(m *mymodel.PowerSocket) *powerSocketBelongsToChargePointTx {
	return &powerSocketBelongsToChargePointTx{a.db.Model(m).Association(a.Name())}
}

func (a powerSocketBelongsToChargePoint) Unscoped() *powerSocketBelongsToChargePoint {
	a.db = a.db.Unscoped()
	return &a
}

type powerSocketBelongsToChargePointTx struct{ tx *gorm.Association }

func (a powerSocketBelongsToChargePointTx) Find() (result *mymodel.ChargePoint, err error) {
	return result, a.tx.Find(&result)
}

func (a powerSocketBelongsToChargePointTx) Append(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a powerSocketBelongsToChargePointTx) Replace(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a powerSocketBelongsToChargePointTx) Delete(values ...*mymodel.ChargePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a powerSocketBelongsToChargePointTx) Clear() error {
	return a.tx.Clear()
}

func (a powerSocketBelongsToChargePointTx) Count() int64 {
	return a.tx.Count()
}

func (a powerSocketBelongsToChargePointTx) Unscoped() *powerSocketBelongsToChargePointTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type powerSocketDo struct{ gen.DO }

type IPowerSocketDo interface {
	gen.SubQuery
	Debug() IPowerSocketDo
	WithContext(ctx context.Context) IPowerSocketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPowerSocketDo
	WriteDB() IPowerSocketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPowerSocketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPowerSocketDo
	Not(conds ...gen.Condition) IPowerSocketDo
	Or(conds ...gen.Condition) IPowerSocketDo
	Select(conds ...field.Expr) IPowerSocketDo
	Where(conds ...gen.Condition) IPowerSocketDo
	Order(conds ...field.Expr) IPowerSocketDo
	Distinct(cols ...field.Expr) IPowerSocketDo
	Omit(cols ...field.Expr) IPowerSocketDo
	Join(table schema.Tabler, on ...field.Expr) IPowerSocketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPowerSocketDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPowerSocketDo
	Group(cols ...field.Expr) IPowerSocketDo
	Having(conds ...gen.Condition) IPowerSocketDo
	Limit(limit int) IPowerSocketDo
	Offset(offset int) IPowerSocketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPowerSocketDo
	Unscoped() IPowerSocketDo
	Create(values ...*mymodel.PowerSocket) error
	CreateInBatches(values []*mymodel.PowerSocket, batchSize int) error
	Save(values ...*mymodel.PowerSocket) error
	First() (*mymodel.PowerSocket, error)
	Take() (*mymodel.PowerSocket, error)
	Last() (*mymodel.PowerSocket, error)
	Find() ([]*mymodel.PowerSocket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mymodel.PowerSocket, err error)
	FindInBatches(result *[]*mymodel.PowerSocket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*mymodel.PowerSocket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPowerSocketDo
	Assign(attrs ...field.AssignExpr) IPowerSocketDo
	Joins(fields ...field.RelationField) IPowerSocketDo
	Preload(fields ...field.RelationField) IPowerSocketDo
	FirstOrInit() (*mymodel.PowerSocket, error)
	FirstOrCreate() (*mymodel.PowerSocket, error)
	FindByPage(offset int, limit int) (result []*mymodel.PowerSocket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPowerSocketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p powerSocketDo) Debug() IPowerSocketDo {
	return p.withDO(p.DO.Debug())
}

func (p powerSocketDo) WithContext(ctx context.Context) IPowerSocketDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p powerSocketDo) ReadDB() IPowerSocketDo {
	return p.Clauses(dbresolver.Read)
}

func (p powerSocketDo) WriteDB() IPowerSocketDo {
	return p.Clauses(dbresolver.Write)
}

func (p powerSocketDo) Session(config *gorm.Session) IPowerSocketDo {
	return p.withDO(p.DO.Session(config))
}

func (p powerSocketDo) Clauses(conds ...clause.Expression) IPowerSocketDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p powerSocketDo) Returning(value interface{}, columns ...string) IPowerSocketDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p powerSocketDo) Not(conds ...gen.Condition) IPowerSocketDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p powerSocketDo) Or(conds ...gen.Condition) IPowerSocketDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p powerSocketDo) Select(conds ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p powerSocketDo) Where(conds ...gen.Condition) IPowerSocketDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p powerSocketDo) Order(conds ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p powerSocketDo) Distinct(cols ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p powerSocketDo) Omit(cols ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p powerSocketDo) Join(table schema.Tabler, on ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p powerSocketDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p powerSocketDo) RightJoin(table schema.Tabler, on ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p powerSocketDo) Group(cols ...field.Expr) IPowerSocketDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p powerSocketDo) Having(conds ...gen.Condition) IPowerSocketDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p powerSocketDo) Limit(limit int) IPowerSocketDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p powerSocketDo) Offset(offset int) IPowerSocketDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p powerSocketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPowerSocketDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p powerSocketDo) Unscoped() IPowerSocketDo {
	return p.withDO(p.DO.Unscoped())
}

func (p powerSocketDo) Create(values ...*mymodel.PowerSocket) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p powerSocketDo) CreateInBatches(values []*mymodel.PowerSocket, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p powerSocketDo) Save(values ...*mymodel.PowerSocket) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p powerSocketDo) First() (*mymodel.PowerSocket, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.PowerSocket), nil
	}
}

func (p powerSocketDo) Take() (*mymodel.PowerSocket, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.PowerSocket), nil
	}
}

func (p powerSocketDo) Last() (*mymodel.PowerSocket, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.PowerSocket), nil
	}
}

func (p powerSocketDo) Find() ([]*mymodel.PowerSocket, error) {
	result, err := p.DO.Find()
	return result.([]*mymodel.PowerSocket), err
}

func (p powerSocketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*mymodel.PowerSocket, err error) {
	buf := make([]*mymodel.PowerSocket, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p powerSocketDo) FindInBatches(result *[]*mymodel.PowerSocket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p powerSocketDo) Attrs(attrs ...field.AssignExpr) IPowerSocketDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p powerSocketDo) Assign(attrs ...field.AssignExpr) IPowerSocketDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p powerSocketDo) Joins(fields ...field.RelationField) IPowerSocketDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p powerSocketDo) Preload(fields ...field.RelationField) IPowerSocketDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p powerSocketDo) FirstOrInit() (*mymodel.PowerSocket, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.PowerSocket), nil
	}
}

func (p powerSocketDo) FirstOrCreate() (*mymodel.PowerSocket, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*mymodel.PowerSocket), nil
	}
}

func (p powerSocketDo) FindByPage(offset int, limit int) (result []*mymodel.PowerSocket, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p powerSocketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p powerSocketDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p powerSocketDo) Delete(models ...*mymodel.PowerSocket) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *powerSocketDo) withDO(do gen.Dao) *powerSocketDo {
	p.DO = *do.(*gen.DO)
	return p
}
