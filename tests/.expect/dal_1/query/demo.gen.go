// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/tests/dal_1/model"
)

func newDemo(db *gorm.DB) demo {
	_demo := demo{}

	_demo.demoDo.UseDB(db)
	_demo.demoDo.UseModel(&model.Demo{})

	tableName := _demo.demoDo.TableName()
	_demo.ALL = field.NewAsterisk(tableName)
	_demo.ID = field.NewInt32(tableName, "id")

	_demo.fillFieldMap()

	return _demo
}

type demo struct {
	demoDo demoDo

	ALL field.Asterisk
	ID  field.Int32

	fieldMap map[string]field.Expr
}

func (d demo) Table(newTableName string) *demo {
	d.demoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d demo) As(alias string) *demo {
	d.demoDo.DO = *(d.demoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *demo) updateTableName(table string) *demo {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")

	d.fillFieldMap()

	return d
}

func (d *demo) WithContext(ctx context.Context) *demoDo { return d.demoDo.WithContext(ctx) }

func (d demo) TableName() string { return d.demoDo.TableName() }

func (d demo) Alias() string { return d.demoDo.Alias() }

func (d *demo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *demo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 1)
	d.fieldMap["id"] = d.ID
}

func (d demo) clone(db *gorm.DB) demo {
	d.demoDo.ReplaceDB(db)
	return d
}

type demoDo struct{ gen.DO }

func (d demoDo) Debug() *demoDo {
	return d.withDO(d.DO.Debug())
}

func (d demoDo) WithContext(ctx context.Context) *demoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d demoDo) ReadDB() *demoDo {
	return d.Clauses(dbresolver.Read)
}

func (d demoDo) WriteDB() *demoDo {
	return d.Clauses(dbresolver.Write)
}

func (d demoDo) Clauses(conds ...clause.Expression) *demoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d demoDo) Returning(value interface{}, columns ...string) *demoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d demoDo) Not(conds ...gen.Condition) *demoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d demoDo) Or(conds ...gen.Condition) *demoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d demoDo) Select(conds ...field.Expr) *demoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d demoDo) Where(conds ...gen.Condition) *demoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d demoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *demoDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d demoDo) Order(conds ...field.Expr) *demoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d demoDo) Distinct(cols ...field.Expr) *demoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d demoDo) Omit(cols ...field.Expr) *demoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d demoDo) Join(table schema.Tabler, on ...field.Expr) *demoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d demoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *demoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d demoDo) RightJoin(table schema.Tabler, on ...field.Expr) *demoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d demoDo) Group(cols ...field.Expr) *demoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d demoDo) Having(conds ...gen.Condition) *demoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d demoDo) Limit(limit int) *demoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d demoDo) Offset(offset int) *demoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d demoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *demoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d demoDo) Unscoped() *demoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d demoDo) Create(values ...*model.Demo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d demoDo) CreateInBatches(values []*model.Demo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d demoDo) Save(values ...*model.Demo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d demoDo) First() (*model.Demo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demo), nil
	}
}

func (d demoDo) Take() (*model.Demo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demo), nil
	}
}

func (d demoDo) Last() (*model.Demo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demo), nil
	}
}

func (d demoDo) Find() ([]*model.Demo, error) {
	result, err := d.DO.Find()
	return result.([]*model.Demo), err
}

func (d demoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Demo, err error) {
	buf := make([]*model.Demo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d demoDo) FindInBatches(result *[]*model.Demo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d demoDo) Attrs(attrs ...field.AssignExpr) *demoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d demoDo) Assign(attrs ...field.AssignExpr) *demoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d demoDo) Joins(fields ...field.RelationField) *demoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d demoDo) Preload(fields ...field.RelationField) *demoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d demoDo) FirstOrInit() (*model.Demo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demo), nil
	}
}

func (d demoDo) FirstOrCreate() (*model.Demo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demo), nil
	}
}

func (d demoDo) FindByPage(offset int, limit int) (result []*model.Demo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d demoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d demoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d demoDo) Delete(models ...*model.Demo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *demoDo) withDO(do gen.Dao) *demoDo {
	d.DO = *do.(*gen.DO)
	return d
}
