// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/gen/tests/.gen/dal_5/model"
)

func newCreditCard(db *gorm.DB, opts ...gen.DOOption) creditCard {
	_creditCard := creditCard{}

	_creditCard.creditCardDo.UseDB(db, opts...)
	_creditCard.creditCardDo.UseModel(&model.CreditCard{})

	tableName := _creditCard.creditCardDo.TableName()
	_creditCard.ALL = field.NewAsterisk(tableName)
	_creditCard.ID = field.NewInt64(tableName, "id")
	_creditCard.CreatedAt = field.NewTime(tableName, "created_at")
	_creditCard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_creditCard.DeletedAt = field.NewField(tableName, "deleted_at")
	_creditCard.Number = field.NewString(tableName, "number")
	_creditCard.CustomerRefer = field.NewInt64(tableName, "customer_refer")
	_creditCard.BankID = field.NewInt64(tableName, "bank_id")

	_creditCard.fillFieldMap()

	return _creditCard
}

type creditCard struct {
	creditCardDo creditCardDo

	ALL           field.Asterisk
	ID            field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Number        field.String
	CustomerRefer field.Int64
	BankID        field.Int64

	fieldMap map[string]field.Expr
}

func (c creditCard) Table(newTableName string) *creditCard {
	c.creditCardDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c creditCard) As(alias string) *creditCard {
	c.creditCardDo.DO = *(c.creditCardDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *creditCard) updateTableName(table string) *creditCard {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Number = field.NewString(table, "number")
	c.CustomerRefer = field.NewInt64(table, "customer_refer")
	c.BankID = field.NewInt64(table, "bank_id")

	c.fillFieldMap()

	return c
}

func (c *creditCard) WithContext(ctx context.Context) ICreditCardDo {
	return c.creditCardDo.WithContext(ctx)
}

func (c creditCard) TableName() string { return c.creditCardDo.TableName() }

func (c creditCard) Alias() string { return c.creditCardDo.Alias() }

func (c *creditCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *creditCard) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["number"] = c.Number
	c.fieldMap["customer_refer"] = c.CustomerRefer
	c.fieldMap["bank_id"] = c.BankID
}

func (c creditCard) clone(db *gorm.DB) creditCard {
	c.creditCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c creditCard) replaceDB(db *gorm.DB) creditCard {
	c.creditCardDo.ReplaceDB(db)
	return c
}

type creditCardDo struct{ gen.DO }

type ICreditCardDo interface {
	WithContext(ctx context.Context) ICreditCardDo
}

func (c creditCardDo) WithContext(ctx context.Context) ICreditCardDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c *creditCardDo) withDO(do gen.Dao) *creditCardDo {
	c.DO = *do.(*gen.DO)
	return c
}
